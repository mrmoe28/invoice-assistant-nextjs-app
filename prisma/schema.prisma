// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  companyName   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts  Account[]
  sessions  Session[]
  clients   Client[]
  invoices  Invoice[]
  templates Template[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Invoice Assistant Models
model Client {
  id          String   @id @default(cuid())
  userId      String
  name        String
  email       String?
  phone       String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  country     String?   @default("US")
  avatarUrl   String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices Invoice[]
}

model Invoice {
  id            String   @id @default(cuid())
  userId        String
  clientId      String
  invoiceNumber String   @unique
  status        String   @default("draft") // draft, pending, paid, overdue, cancelled
  title         String?
  description   String?
  subtotal      Decimal  @default(0) @db.Decimal(10, 2)
  taxRate       Decimal  @default(0) @db.Decimal(5, 2)
  taxAmount     Decimal  @default(0) @db.Decimal(10, 2)
  total         Decimal  @default(0) @db.Decimal(10, 2)
  currency      String   @default("USD")
  issueDate     DateTime @default(now())
  dueDate       DateTime?
  paidDate      DateTime?
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  client Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  items  InvoiceItem[]
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoiceId   String
  description String
  quantity    Decimal @default(1) @db.Decimal(10, 2)
  price       Decimal @db.Decimal(10, 2)
  total       Decimal @db.Decimal(10, 2)
  order       Int     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model Template {
  id                String   @id @default(cuid())
  userId            String
  name              String
  description       String?
  itemsJson         String   @db.Text // JSON array of template items
  superDesignConfig String?  @db.Text // JSON config for super_design theming
  isDefault         Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
